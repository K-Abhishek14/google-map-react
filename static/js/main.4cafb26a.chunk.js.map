{"version":3,"sources":["Map/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Map","idText","sendData","useEffect","mapboxgl","map","container","style","center","zoom","geocoder","MapboxGeocoder","accessToken","marker","on","data","console","log","result","context","place_name","point","setLngLat","addTo","addControl","id","position","width","height","borderRadius","overflow","App","getData","val","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAgDeA,EA5CH,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,OAAOC,EAAc,EAAdA,SAwCnB,OAvCAC,qBAAU,WACRC,cAAuB,oGACvB,IAAIC,EAAM,IAAID,MAAa,CACzBE,UAAWL,EACXM,MAAO,qCACPC,OAAQ,CAAC,MAAO,QAChBC,KAAM,KAGFC,EAAW,IAAIC,EAAe,CAClCC,YAAaR,cACbS,QAAQ,IAINA,EAAS,IAAIT,SAAgB,CAAE,MAAS,YAC5CM,EAASI,GAAG,UAAU,SAAUC,GAC9BC,QAAQC,IAAI,OAAOF,GACnBC,QAAQC,IAAI,UAAWF,EAAKG,OAAOC,SAMnCH,QAAQC,IAAI,cAAeF,EAAKG,OAAOE,YAGvCf,EAAIS,GAAG,QAAQ,WACbE,QAAQC,IAAI,gBAAiBF,EAAKG,OAAOE,YACzClB,EAASa,EAAKG,OAAOE,eAGvB,IAAIC,EAAQN,EAAKG,OAAOV,OACxBQ,QAAQC,IAAI,QAASI,GACrBR,EAAOS,UAAUD,GAAOE,MAAMlB,MAEhCA,EAAImB,WAAWd,MAIf,qBAAKe,GAAIxB,EAAQM,MAAO,CAACmB,SAAS,WAAWC,MAAM,OAAOC,OAAO,QAAQC,aAAa,OAAOC,SAAS,aCpB3FC,EApBH,WAEV,IAAMC,EAAU,SAACC,GAEfjB,QAAQC,IAAI,kBAAmBgB,IAIjC,OACE,mCACE,qBAAKR,GAAG,KAAR,SACG,CAAC,EAAG,GAAGpB,KAAI,SAAA6B,GACV,OAAO,cAAC,EAAD,CAAKjC,OAAM,aAAQiC,GAAQhC,SAAU8B,YCLvCG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4cafb26a.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport * as MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\r\nimport * as mapboxgl from 'mapbox-gl';\r\n\r\nconst Map = ({idText,sendData}) => {\r\n  useEffect(() => {\r\n    mapboxgl.accessToken = 'pk.eyJ1IjoiYWJoaXRlY25vdHJlZSIsImEiOiJja2p6YTMwMWMwNWxtMm5vNThrMjdzbGkzIn0.49zHTMipxscPu8gBag2mFA';\r\n    var map = new mapboxgl.Map({\r\n      container: idText ,\r\n      style: 'mapbox://styles/mapbox/streets-v11',\r\n      center: [47.98, 29.375],\r\n      zoom: 13\r\n    });\r\n \r\n    const geocoder = new MapboxGeocoder({\r\n      accessToken: mapboxgl.accessToken,\r\n      marker: false\r\n      \r\n    })\r\n\r\n    var marker = new mapboxgl.Marker({ 'color': '#008000' })\r\n    geocoder.on('result', function (data) {\r\n      console.log(\"DATA\",data);\r\n      console.log(\"CONTEXT\", data.result.context);\r\n      // let context = data.result.context;\r\n      // context && context.map((item,index) =>{\r\n      //   console.log(\"Item\",item);\r\n      //   console.log(\"item.text\",item.text);\r\n      // })\r\n      console.log(\"Place name:\", data.result.place_name)\r\n      // sendData(data.result.place_name)\r\n\r\n      map.on('load', function () {\r\n        console.log(\"Place name11:\", data.result.place_name)\r\n        sendData(data.result.place_name)\r\n      })\r\n     \r\n      var point = data.result.center;\r\n      console.log(\"POINT\", point)\r\n      marker.setLngLat(point).addTo(map);\r\n    });\r\n    map.addControl(geocoder)\r\n  })\r\n  \r\n  return (\r\n    <div id={idText} style={{position:'relative',width:'100%',height:'22rem',borderRadius:'1rem',overflow:'hidden'}}></div>\r\n  )\r\n}\r\nexport default Map\r\n","import React from 'react'\nimport Map from './Map/Map';\n \n\n\nconst App = () => {\n\n  const getData = (val) => {\n\n    console.log(\"CHILD TO PARENT\", val);\n  }\n\n   \n  return (\n    <>\n      <div id=\"#1\">\n        {[1, 2].map(item => {\n          return <Map idText={`map${item}`} sendData={getData} />\n        })}\n          \n      </div>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}